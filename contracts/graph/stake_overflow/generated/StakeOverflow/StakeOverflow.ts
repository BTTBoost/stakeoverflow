// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewAnswerAdded extends ethereum.Event {
  get params(): NewAnswerAdded__Params {
    return new NewAnswerAdded__Params(this);
  }
}

export class NewAnswerAdded__Params {
  _event: NewAnswerAdded;

  constructor(event: NewAnswerAdded) {
    this._event = event;
  }

  get questionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get answerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get answerID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get contentURI(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class NewQuestionAdded extends ethereum.Event {
  get params(): NewQuestionAdded__Params {
    return new NewQuestionAdded__Params(this);
  }
}

export class NewQuestionAdded__Params {
  _event: NewQuestionAdded;

  constructor(event: NewQuestionAdded) {
    this._event = event;
  }

  get questioner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get questionID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get contentURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class QuestionClosed extends ethereum.Event {
  get params(): QuestionClosed__Params {
    return new QuestionClosed__Params(this);
  }
}

export class QuestionClosed__Params {
  _event: QuestionClosed;

  constructor(event: QuestionClosed) {
    this._event = event;
  }

  get questionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reducedStake(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Rewarded extends ethereum.Event {
  get params(): Rewarded__Params {
    return new Rewarded__Params(this);
  }
}

export class Rewarded__Params {
  _event: Rewarded;

  constructor(event: Rewarded) {
    this._event = event;
  }

  get questionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get answerID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get questioner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get answerer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get questionerReward(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get answererReward(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get reducedStake(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class StakedToQuestion extends ethereum.Event {
  get params(): StakedToQuestion__Params {
    return new StakedToQuestion__Params(this);
  }
}

export class StakedToQuestion__Params {
  _event: StakedToQuestion;

  constructor(event: StakedToQuestion) {
    this._event = event;
  }

  get questionID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeOverflow___answersResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class StakeOverflow___questionsResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class StakeOverflow extends ethereum.SmartContract {
  static bind(address: Address): StakeOverflow {
    return new StakeOverflow("StakeOverflow", address);
  }

  _answers(param0: BigInt): StakeOverflow___answersResult {
    let result = super.call(
      "_answers",
      "_answers(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeOverflow___answersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try__answers(
    param0: BigInt
  ): ethereum.CallResult<StakeOverflow___answersResult> {
    let result = super.tryCall(
      "_answers",
      "_answers(uint256):(address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeOverflow___answersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  _pooledAmount(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "_pooledAmount",
      "_pooledAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try__pooledAmount(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_pooledAmount",
      "_pooledAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _questions(param0: BigInt): StakeOverflow___questionsResult {
    let result = super.call(
      "_questions",
      "_questions(uint256):(uint8,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakeOverflow___questionsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try__questions(
    param0: BigInt
  ): ethereum.CallResult<StakeOverflow___questionsResult> {
    let result = super.tryCall(
      "_questions",
      "_questions(uint256):(uint8,address,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakeOverflow___questionsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  _rewardedAmount(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "_rewardedAmount",
      "_rewardedAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try__rewardedAmount(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_rewardedAmount",
      "_rewardedAmount(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getContentURI(contentID: BigInt): string {
    let result = super.call(
      "getContentURI",
      "getContentURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(contentID)]
    );

    return result[0].toString();
  }

  try_getContentURI(contentID: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getContentURI",
      "getContentURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(contentID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseQuestionCall extends ethereum.Call {
  get inputs(): CloseQuestionCall__Inputs {
    return new CloseQuestionCall__Inputs(this);
  }

  get outputs(): CloseQuestionCall__Outputs {
    return new CloseQuestionCall__Outputs(this);
  }
}

export class CloseQuestionCall__Inputs {
  _call: CloseQuestionCall;

  constructor(call: CloseQuestionCall) {
    this._call = call;
  }

  get questionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseQuestionCall__Outputs {
  _call: CloseQuestionCall;

  constructor(call: CloseQuestionCall) {
    this._call = call;
  }
}

export class CreateAnswerCall extends ethereum.Call {
  get inputs(): CreateAnswerCall__Inputs {
    return new CreateAnswerCall__Inputs(this);
  }

  get outputs(): CreateAnswerCall__Outputs {
    return new CreateAnswerCall__Outputs(this);
  }
}

export class CreateAnswerCall__Inputs {
  _call: CreateAnswerCall;

  constructor(call: CreateAnswerCall) {
    this._call = call;
  }

  get questionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get ipfsContentHash(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class CreateAnswerCall__Outputs {
  _call: CreateAnswerCall;

  constructor(call: CreateAnswerCall) {
    this._call = call;
  }
}

export class CreateQuestionCall extends ethereum.Call {
  get inputs(): CreateQuestionCall__Inputs {
    return new CreateQuestionCall__Inputs(this);
  }

  get outputs(): CreateQuestionCall__Outputs {
    return new CreateQuestionCall__Outputs(this);
  }
}

export class CreateQuestionCall__Inputs {
  _call: CreateQuestionCall;

  constructor(call: CreateQuestionCall) {
    this._call = call;
  }

  get ipfsContentHash(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateQuestionCall__Outputs {
  _call: CreateQuestionCall;

  constructor(call: CreateQuestionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RewardDirectlyCall extends ethereum.Call {
  get inputs(): RewardDirectlyCall__Inputs {
    return new RewardDirectlyCall__Inputs(this);
  }

  get outputs(): RewardDirectlyCall__Outputs {
    return new RewardDirectlyCall__Outputs(this);
  }
}

export class RewardDirectlyCall__Inputs {
  _call: RewardDirectlyCall;

  constructor(call: RewardDirectlyCall) {
    this._call = call;
  }

  get questionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get answerID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RewardDirectlyCall__Outputs {
  _call: RewardDirectlyCall;

  constructor(call: RewardDirectlyCall) {
    this._call = call;
  }
}

export class RewardFromPoolCall extends ethereum.Call {
  get inputs(): RewardFromPoolCall__Inputs {
    return new RewardFromPoolCall__Inputs(this);
  }

  get outputs(): RewardFromPoolCall__Outputs {
    return new RewardFromPoolCall__Outputs(this);
  }
}

export class RewardFromPoolCall__Inputs {
  _call: RewardFromPoolCall;

  constructor(call: RewardFromPoolCall) {
    this._call = call;
  }

  get questionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get answerID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RewardFromPoolCall__Outputs {
  _call: RewardFromPoolCall;

  constructor(call: RewardFromPoolCall) {
    this._call = call;
  }
}

export class StakeToQuestionCall extends ethereum.Call {
  get inputs(): StakeToQuestionCall__Inputs {
    return new StakeToQuestionCall__Inputs(this);
  }

  get outputs(): StakeToQuestionCall__Outputs {
    return new StakeToQuestionCall__Outputs(this);
  }
}

export class StakeToQuestionCall__Inputs {
  _call: StakeToQuestionCall;

  constructor(call: StakeToQuestionCall) {
    this._call = call;
  }

  get questionID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StakeToQuestionCall__Outputs {
  _call: StakeToQuestionCall;

  constructor(call: StakeToQuestionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeeCall extends ethereum.Call {
  get inputs(): WithdrawFeeCall__Inputs {
    return new WithdrawFeeCall__Inputs(this);
  }

  get outputs(): WithdrawFeeCall__Outputs {
    return new WithdrawFeeCall__Outputs(this);
  }
}

export class WithdrawFeeCall__Inputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }
}

export class WithdrawFeeCall__Outputs {
  _call: WithdrawFeeCall;

  constructor(call: WithdrawFeeCall) {
    this._call = call;
  }
}
